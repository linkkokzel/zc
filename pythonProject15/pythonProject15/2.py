import requests
import random
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)
from googletrans import Translator
import os
from dotenv import load_dotenv

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
TELEGRAM_TOKEN = '7912178851:AAH7a4ejDRUqwaaSV75QME-k0FJCSNMCrxQ'

translator = Translator()

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ ---
def translate_to_en(text: str) -> str:
    try:
        return translator.translate(text, dest='en').text
    except Exception:
        return text

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ ---
def format_country_info(country):
    name = country.get('name', {}).get('common', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    capital = country.get('capital', ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'])[0]
    population = country.get('population', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    languages = ', '.join(country.get('languages', {}).values()) or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    flag_url = country.get('flags', {}).get('png', '')
    currencies = country.get('currencies', {})
    currency = ', '.join([f"{v.get('name', '')} ({k})" for k, v in currencies.items()]) if currencies else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    region = country.get('region', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
    return (
        f"üåç <b>{name}</b>\n"
        f"üèô –°—Ç–æ–ª–∏—Ü–∞: {capital}\n"
        f"üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population}\n"
        f"üó£ –Ø–∑—ã–∫–∏: {languages}\n"
        f"üí∞ –í–∞–ª—é—Ç–∞: {currency}\n"
        f"üåê –†–µ–≥–∏–æ–Ω: {region}\n"
        f"üè≥Ô∏è –§–ª–∞–≥: <a href='{flag_url}'>—Å—Å—ã–ª–∫–∞</a>"
    )

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---
def get_country_info_by_name(name: str) -> str:
    name_en = translate_to_en(name)
    url = f'https://restcountries.com/v3.1/name/{name_en}'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        return format_country_info(data[0])
    except Exception:
        return "‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ –ø–æ —Å—Ç–æ–ª–∏—Ü–µ ---
def get_country_info_by_capital(capital: str) -> str:
    capital_en = translate_to_en(capital)
    url = f'https://restcountries.com/v3.1/capital/{capital_en}'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        return format_country_info(data[0])
    except Exception:
        return "‚ùå –°—Ç—Ä–∞–Ω–∞ –ø–æ —Ç–∞–∫–æ–π —Å—Ç–æ–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –¥–ª—è –∏–≥—Ä—ã ---
def get_random_country_fact():
    url = 'https://restcountries.com/v3.1/all'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        countries = response.json()
        country = random.choice(countries)
        name = country.get('name', {}).get('common', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        facts = []
        if 'capital' in country:
            facts.append(f"–°—Ç–æ–ª–∏—Ü–∞ ‚Äî {country['capital'][0]}")
        if 'region' in country:
            facts.append(f"–†–µ–≥–∏–æ–Ω ‚Äî {country['region']}")
        if 'languages' in country:
            lang = list(country['languages'].values())[0]
            facts.append(f"–û–¥–∏–Ω –∏–∑ —è–∑—ã–∫–æ–≤ ‚Äî {lang}")
        if 'currencies' in country:
            curr = list(country['currencies'].values())[0].get('name', '')
            facts.append(f"–í–∞–ª—é—Ç–∞ ‚Äî {curr}")
        if not facts:
            facts.append("–≠—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∞.")
        fact = random.choice(facts)
        return name, fact
    except Exception:
        return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞."

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

GAME_ANSWER = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∞—Ö.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/info <—Å—Ç—Ä–∞–Ω–∞> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ\n"
        "/capital <—Å—Ç–æ–ª–∏—Ü–∞> ‚Äî –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã –ø–æ —Å—Ç–æ–ª–∏—Ü–µ\n"
        "/game ‚Äî –∏–≥—Ä–∞ ¬´–£–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É –ø–æ —Ñ–∞–∫—Ç—É¬ª\n"
        "–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å–ª–µ /info.")
        return
    name = ' '.join(context.args)
    result = get_country_info_by_name(name)
    await update.message.reply_html(result, disable_web_page_preview=False)

async def capital(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã –ø–æ—Å–ª–µ /capital.")
        return
    capital_name = ' '.join(context.args)
    result = get_country_info_by_capital(capital_name)
    await update.message.reply_html(result, disable_web_page_preview=False)

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    country, fact = get_random_country_fact()
    if not country:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    GAME_ANSWER[user_id] = country.lower()
    await update.message.reply_text(
        f"–£–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É –ø–æ —Ñ–∞–∫—Ç—É:\n<b>{fact}</b>\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        parse_mode="HTML"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    if user_id in GAME_ANSWER:
        guess = text.lower()
        answer = GAME_ANSWER[user_id].lower()
        guess_en = translate_to_en(guess).lower()
        if guess == answer or guess_en == answer:
            await update.message.reply_text(f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ –±—ã–ª–∞ —Å—Ç—Ä–∞–Ω–∞: {answer.title()}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /game –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        del GAME_ANSWER[user_id]
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –∏–≥—Ä–µ ‚Äî –∏—â–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å—Ç–æ–ª–∏—Ü–µ
        result = get_country_info_by_name(text)
        if "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in result.lower():
            result = get_country_info_by_capital(text)
        await update.message.reply_html(result, disable_web_page_preview=False)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("capital", capital))
    app.add_handler(CommandHandler("game", game_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


load_dotenv()
API_KEY = os.getenv('API_KEY')
if __name__ == '__main__':
    main()